# Generated from C:/Informatyka_i_systemy_inteligentne/ROK II/Sem_4/Teoria_kompilacji_i_kompilatory/Project/Ruby-2-Python/Project\Ruby.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,370,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,1,1,1,1,1,5,1,114,8,1,10,1,12,1,117,9,1,1,
        1,1,1,1,1,1,1,5,1,123,8,1,10,1,12,1,126,9,1,1,1,3,1,129,8,1,1,2,
        1,2,1,3,1,3,1,4,3,4,136,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
        29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
        34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,38,3,38,272,8,38,1,39,1,39,1,39,1,39,3,39,278,
        8,39,1,40,1,40,1,40,1,40,3,40,284,8,40,1,41,1,41,1,42,1,42,1,43,
        1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,5,46,300,8,46,10,46,
        12,46,303,9,46,1,46,3,46,306,8,46,1,46,1,46,1,46,1,46,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,5,47,320,8,47,10,47,12,47,323,9,47,
        1,47,1,47,1,47,1,47,1,47,1,47,3,47,331,8,47,1,47,1,47,1,47,1,47,
        1,48,4,48,338,8,48,11,48,12,48,339,1,48,1,48,1,49,4,49,345,8,49,
        11,49,12,49,346,1,50,5,50,350,8,50,10,50,12,50,353,9,50,1,50,1,50,
        4,50,357,8,50,11,50,12,50,358,1,51,1,51,5,51,363,8,51,10,51,12,51,
        366,9,51,1,52,1,52,1,52,3,115,124,321,0,53,1,0,3,1,5,2,7,3,9,4,11,
        5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,
        35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,
        57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,77,38,
        79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,47,97,48,99,49,
        101,50,103,51,105,52,1,0,5,2,0,10,10,13,13,2,0,9,9,32,32,1,0,48,
        57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,386,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,128,1,0,0,0,5,130,1,0,0,0,7,
        132,1,0,0,0,9,135,1,0,0,0,11,139,1,0,0,0,13,147,1,0,0,0,15,151,1,
        0,0,0,17,155,1,0,0,0,19,162,1,0,0,0,21,165,1,0,0,0,23,170,1,0,0,
        0,25,176,1,0,0,0,27,183,1,0,0,0,29,189,1,0,0,0,31,195,1,0,0,0,33,
        201,1,0,0,0,35,205,1,0,0,0,37,210,1,0,0,0,39,216,1,0,0,0,41,218,
        1,0,0,0,43,220,1,0,0,0,45,222,1,0,0,0,47,224,1,0,0,0,49,226,1,0,
        0,0,51,229,1,0,0,0,53,232,1,0,0,0,55,235,1,0,0,0,57,237,1,0,0,0,
        59,239,1,0,0,0,61,242,1,0,0,0,63,245,1,0,0,0,65,247,1,0,0,0,67,250,
        1,0,0,0,69,253,1,0,0,0,71,256,1,0,0,0,73,259,1,0,0,0,75,262,1,0,
        0,0,77,271,1,0,0,0,79,277,1,0,0,0,81,283,1,0,0,0,83,285,1,0,0,0,
        85,287,1,0,0,0,87,289,1,0,0,0,89,291,1,0,0,0,91,293,1,0,0,0,93,297,
        1,0,0,0,95,311,1,0,0,0,97,337,1,0,0,0,99,344,1,0,0,0,101,351,1,0,
        0,0,103,360,1,0,0,0,105,367,1,0,0,0,107,108,5,92,0,0,108,109,5,34,
        0,0,109,2,1,0,0,0,110,115,5,34,0,0,111,114,3,1,0,0,112,114,8,0,0,
        0,113,111,1,0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,116,1,0,0,
        0,115,113,1,0,0,0,116,118,1,0,0,0,117,115,1,0,0,0,118,129,5,34,0,
        0,119,124,5,39,0,0,120,123,3,1,0,0,121,123,8,0,0,0,122,120,1,0,0,
        0,122,121,1,0,0,0,123,126,1,0,0,0,124,125,1,0,0,0,124,122,1,0,0,
        0,125,127,1,0,0,0,126,124,1,0,0,0,127,129,5,39,0,0,128,110,1,0,0,
        0,128,119,1,0,0,0,129,4,1,0,0,0,130,131,5,44,0,0,131,6,1,0,0,0,132,
        133,5,59,0,0,133,8,1,0,0,0,134,136,5,13,0,0,135,134,1,0,0,0,135,
        136,1,0,0,0,136,137,1,0,0,0,137,138,5,10,0,0,138,10,1,0,0,0,139,
        140,5,114,0,0,140,141,5,101,0,0,141,142,5,113,0,0,142,143,5,117,
        0,0,143,144,5,105,0,0,144,145,5,114,0,0,145,146,5,101,0,0,146,12,
        1,0,0,0,147,148,5,101,0,0,148,149,5,110,0,0,149,150,5,100,0,0,150,
        14,1,0,0,0,151,152,5,100,0,0,152,153,5,101,0,0,153,154,5,102,0,0,
        154,16,1,0,0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,158,5,116,
        0,0,158,159,5,117,0,0,159,160,5,114,0,0,160,161,5,110,0,0,161,18,
        1,0,0,0,162,163,5,105,0,0,163,164,5,102,0,0,164,20,1,0,0,0,165,166,
        5,101,0,0,166,167,5,108,0,0,167,168,5,115,0,0,168,169,5,101,0,0,
        169,22,1,0,0,0,170,171,5,101,0,0,171,172,5,108,0,0,172,173,5,115,
        0,0,173,174,5,105,0,0,174,175,5,102,0,0,175,24,1,0,0,0,176,177,5,
        117,0,0,177,178,5,110,0,0,178,179,5,108,0,0,179,180,5,101,0,0,180,
        181,5,115,0,0,181,182,5,115,0,0,182,26,1,0,0,0,183,184,5,119,0,0,
        184,185,5,104,0,0,185,186,5,105,0,0,186,187,5,108,0,0,187,188,5,
        101,0,0,188,28,1,0,0,0,189,190,5,114,0,0,190,191,5,101,0,0,191,192,
        5,116,0,0,192,193,5,114,0,0,193,194,5,121,0,0,194,30,1,0,0,0,195,
        196,5,98,0,0,196,197,5,114,0,0,197,198,5,101,0,0,198,199,5,97,0,
        0,199,200,5,107,0,0,200,32,1,0,0,0,201,202,5,102,0,0,202,203,5,111,
        0,0,203,204,5,114,0,0,204,34,1,0,0,0,205,206,5,116,0,0,206,207,5,
        114,0,0,207,208,5,117,0,0,208,209,5,101,0,0,209,36,1,0,0,0,210,211,
        5,102,0,0,211,212,5,97,0,0,212,213,5,108,0,0,213,214,5,115,0,0,214,
        215,5,101,0,0,215,38,1,0,0,0,216,217,5,43,0,0,217,40,1,0,0,0,218,
        219,5,45,0,0,219,42,1,0,0,0,220,221,5,42,0,0,221,44,1,0,0,0,222,
        223,5,47,0,0,223,46,1,0,0,0,224,225,5,37,0,0,225,48,1,0,0,0,226,
        227,5,42,0,0,227,228,5,42,0,0,228,50,1,0,0,0,229,230,5,61,0,0,230,
        231,5,61,0,0,231,52,1,0,0,0,232,233,5,33,0,0,233,234,5,61,0,0,234,
        54,1,0,0,0,235,236,5,62,0,0,236,56,1,0,0,0,237,238,5,60,0,0,238,
        58,1,0,0,0,239,240,5,60,0,0,240,241,5,61,0,0,241,60,1,0,0,0,242,
        243,5,62,0,0,243,244,5,61,0,0,244,62,1,0,0,0,245,246,5,61,0,0,246,
        64,1,0,0,0,247,248,5,43,0,0,248,249,5,61,0,0,249,66,1,0,0,0,250,
        251,5,45,0,0,251,252,5,61,0,0,252,68,1,0,0,0,253,254,5,42,0,0,254,
        255,5,61,0,0,255,70,1,0,0,0,256,257,5,47,0,0,257,258,5,61,0,0,258,
        72,1,0,0,0,259,260,5,37,0,0,260,261,5,61,0,0,261,74,1,0,0,0,262,
        263,5,42,0,0,263,264,5,42,0,0,264,265,5,61,0,0,265,76,1,0,0,0,266,
        267,5,97,0,0,267,268,5,110,0,0,268,272,5,100,0,0,269,270,5,38,0,
        0,270,272,5,38,0,0,271,266,1,0,0,0,271,269,1,0,0,0,272,78,1,0,0,
        0,273,274,5,111,0,0,274,278,5,114,0,0,275,276,5,124,0,0,276,278,
        5,124,0,0,277,273,1,0,0,0,277,275,1,0,0,0,278,80,1,0,0,0,279,280,
        5,110,0,0,280,281,5,111,0,0,281,284,5,116,0,0,282,284,5,33,0,0,283,
        279,1,0,0,0,283,282,1,0,0,0,284,82,1,0,0,0,285,286,5,40,0,0,286,
        84,1,0,0,0,287,288,5,41,0,0,288,86,1,0,0,0,289,290,5,91,0,0,290,
        88,1,0,0,0,291,292,5,93,0,0,292,90,1,0,0,0,293,294,5,110,0,0,294,
        295,5,105,0,0,295,296,5,108,0,0,296,92,1,0,0,0,297,301,5,35,0,0,
        298,300,8,0,0,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,
        301,302,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,304,306,5,13,0,0,
        305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,5,10,0,0,
        308,309,1,0,0,0,309,310,6,46,0,0,310,94,1,0,0,0,311,312,5,61,0,0,
        312,313,5,98,0,0,313,314,5,101,0,0,314,315,5,103,0,0,315,316,5,105,
        0,0,316,317,5,110,0,0,317,321,1,0,0,0,318,320,9,0,0,0,319,318,1,
        0,0,0,320,323,1,0,0,0,321,322,1,0,0,0,321,319,1,0,0,0,322,324,1,
        0,0,0,323,321,1,0,0,0,324,325,5,61,0,0,325,326,5,101,0,0,326,327,
        5,110,0,0,327,328,5,100,0,0,328,330,1,0,0,0,329,331,5,13,0,0,330,
        329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,5,10,0,0,333,
        334,1,0,0,0,334,335,6,47,0,0,335,96,1,0,0,0,336,338,7,1,0,0,337,
        336,1,0,0,0,338,339,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,
        341,1,0,0,0,341,342,6,48,0,0,342,98,1,0,0,0,343,345,7,2,0,0,344,
        343,1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,
        100,1,0,0,0,348,350,7,2,0,0,349,348,1,0,0,0,350,353,1,0,0,0,351,
        349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,351,1,0,0,0,354,
        356,5,46,0,0,355,357,7,2,0,0,356,355,1,0,0,0,357,358,1,0,0,0,358,
        356,1,0,0,0,358,359,1,0,0,0,359,102,1,0,0,0,360,364,7,3,0,0,361,
        363,7,4,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,
        365,1,0,0,0,365,104,1,0,0,0,366,364,1,0,0,0,367,368,5,36,0,0,368,
        369,3,103,51,0,369,106,1,0,0,0,19,0,113,115,122,124,128,135,271,
        277,283,301,305,321,330,339,346,351,358,364,1,6,0,0
    ]

class RubyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LITERAL = 1
    COMMA = 2
    SEMICOLON = 3
    CRLF = 4
    REQUIRE = 5
    END = 6
    DEF = 7
    RETURN = 8
    IF = 9
    ELSE = 10
    ELSIF = 11
    UNLESS = 12
    WHILE = 13
    RETRY = 14
    BREAK = 15
    FOR = 16
    TRUE = 17
    FALSE = 18
    PLUS = 19
    MINUS = 20
    MUL = 21
    DIV = 22
    MOD = 23
    EXP = 24
    EQUAL = 25
    NOT_EQUAL = 26
    GREATER = 27
    LESS = 28
    LESS_EQUAL = 29
    GREATER_EQUAL = 30
    ASSIGN = 31
    PLUS_ASSIGN = 32
    MINUS_ASSIGN = 33
    MUL_ASSIGN = 34
    DIV_ASSIGN = 35
    MOD_ASSIGN = 36
    EXP_ASSIGN = 37
    AND = 38
    OR = 39
    NOT = 40
    LEFT_RBRACKET = 41
    RIGHT_RBRACKET = 42
    LEFT_SBRACKET = 43
    RIGHT_SBRACKET = 44
    NIL = 45
    SINGLE_LINE_COMMENT = 46
    MULTI_LINE_COMMENT = 47
    WHITE_SPACE = 48
    INT = 49
    FLOAT = 50
    ID = 51
    ID_GLOBAL = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "';'", "'require'", "'end'", "'def'", "'return'", "'if'", 
            "'else'", "'elsif'", "'unless'", "'while'", "'retry'", "'break'", 
            "'for'", "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'**'", "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", "'='", 
            "'+='", "'-='", "'*='", "'/='", "'%='", "'**='", "'('", "')'", 
            "'['", "']'", "'nil'" ]

    symbolicNames = [ "<INVALID>",
            "LITERAL", "COMMA", "SEMICOLON", "CRLF", "REQUIRE", "END", "DEF", 
            "RETURN", "IF", "ELSE", "ELSIF", "UNLESS", "WHILE", "RETRY", 
            "BREAK", "FOR", "TRUE", "FALSE", "PLUS", "MINUS", "MUL", "DIV", 
            "MOD", "EXP", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "LESS_EQUAL", 
            "GREATER_EQUAL", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", 
            "DIV_ASSIGN", "MOD_ASSIGN", "EXP_ASSIGN", "AND", "OR", "NOT", 
            "LEFT_RBRACKET", "RIGHT_RBRACKET", "LEFT_SBRACKET", "RIGHT_SBRACKET", 
            "NIL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WHITE_SPACE", 
            "INT", "FLOAT", "ID", "ID_GLOBAL" ]

    ruleNames = [ "ESCAPED_QUOTE", "LITERAL", "COMMA", "SEMICOLON", "CRLF", 
                  "REQUIRE", "END", "DEF", "RETURN", "IF", "ELSE", "ELSIF", 
                  "UNLESS", "WHILE", "RETRY", "BREAK", "FOR", "TRUE", "FALSE", 
                  "PLUS", "MINUS", "MUL", "DIV", "MOD", "EXP", "EQUAL", 
                  "NOT_EQUAL", "GREATER", "LESS", "LESS_EQUAL", "GREATER_EQUAL", 
                  "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MUL_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "EXP_ASSIGN", "AND", "OR", 
                  "NOT", "LEFT_RBRACKET", "RIGHT_RBRACKET", "LEFT_SBRACKET", 
                  "RIGHT_SBRACKET", "NIL", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                  "WHITE_SPACE", "INT", "FLOAT", "ID", "ID_GLOBAL" ]

    grammarFileName = "Ruby.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


